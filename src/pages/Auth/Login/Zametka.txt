import styled from 'styled-components';
import React, { ChangeEvent, useEffect, useState } from 'react';
import Headling from '../../../components/Headling/Headling';
import Input from '../../../components/Input/Input';
import { Link, Navigate } from 'react-router-dom';
import ButtonLink from '../../../components/ButtonLink/ButtonLink';
import Form from '../../../components/Form/Form';

const Wrapper = styled.div`
  width: 560px;
  height: 100vh;
`;

const LoginContainer = styled.div`
  display: flex;
  align-items: center;
  margin: 16px 0px;
`;

const Checkbox = styled.input.attrs({ type: 'checkbox' })`
  margin-right: 28px;
  cursor: pointer;
`;

const Label = styled.label`
  margin-right: auto;
`;

const ForgotPasswordLink = styled(Link)`
  color: blue;
  text-decoration: none;
`;

const BntEntry = styled.button`
  padding: 16px 261px;
  background: rgb(69, 143, 246);
  box-sizing: border-box;
  border: 2px solid rgb(69, 143, 246);
  color: white;
  align-items: center;
  font-size: 16px;
  font-weight: 500;
  line-height: 100%;
  letter-spacing: 0.5px;
  width: 100%;

  margin-bottom: 48px;
  cursor: pointer;
`;

const LinkToRegistration = styled(Link)`
  color: rgb(0, 29, 108);
  font-size: 14px;
  font-weight: 400;
  line-height: 140%;
  letter-spacing: 0%;
  text-align: left;
  text-decoration: none;
`;

const LabelTag = styled.label`
  color: rgb(33, 39, 42);
  font-size: 14px;
  font-weight: 400;
  line-height: 140%;
  letter-spacing: 0%;
  text-align: left;
`;

const Hr = styled.hr`
  border: 1px solid rgb(221, 225, 230);
  margin: 48px 0px;
`;

const Login: React.FC = () => {
  const [email, setEmail] = useState<string>();
  const [password, setPasword] = useState<string>();
  const [emailDirty, setEmailDirty] = useState(false);
  const [passwordDirty, setPasswordDirty] = useState(false);
  const [emailError, setEmailError] = useState('Не может быть пустым');
  const [passwordError, setPasswordError] = useState('Не может быть пустым');
  const [formValid, setFormValid] = useState(false);

  useEffect(() => {
    if (emailError || passwordError) {
      setFormValid(false);
    } else {
      setFormValid(true);
    }
  }, [emailError, passwordError]);

  const emailHandler = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEmail(e.target.value);
    const re =
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if (!re.test(String(e.target.value).toLowerCase())) {
      setEmailError('Некорректный email');
    } else {
      setEmailError('');
    }
  };
  const passwordHandler = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPasword(e.target.value);
    if (e.target.value.length < 4 || e.target.value.length > 15) {
      setPasswordError('Пароль должен быть от 4 до 15 символов');
    } else {
      setPasswordError('');
    }
  };

  const blurHandler = (e: React.FocusEvent<HTMLInputElement>) => {
    switch (e.target.name) {
      case 'email':
        setEmailDirty(true);
        break;
      case 'password':
        setPasswordDirty(true);
        break;
    }
  };

  return (
    <Wrapper>
      <Headling>Вход</Headling>

      <Form>
        <LabelTag htmlFor="email">Email</LabelTag>
        {emailDirty && emailError && <div style={{ color: 'red' }}>{emailError}</div>}
        <Input
          onChange={(e) => emailHandler(e)}
          value={email}
          id="email"
          name="email"
          placeholder="Email"
          onBlur={(e) => blurHandler(e)}
        />

        <LabelTag htmlFor="password">Пароль</LabelTag>
        {passwordDirty && passwordError && <div style={{ color: 'red' }}>{passwordError}</div>}
        <Input
          onChange={(e) => passwordHandler(e)}
          value={password}
          id="password"
          name="password"
          type="password"
          placeholder="Password"
          onBlur={(e) => blurHandler(e)}
        />
      </Form>

      <LoginContainer>
        <Checkbox id="rememberMe" />
        <Label htmlFor="rememberMe">Запомнить меня</Label>
        <ForgotPasswordLink to="/forgot-password">Забыли пароль?</ForgotPasswordLink>
      </LoginContainer>

      <BntEntry>Вход</BntEntry>

      <ButtonLink />

      <Hr />

      <LinkToRegistration to="/trafalgar/auth/register">Нет аккаута? Зарегестрироваться</LinkToRegistration>
    </Wrapper>
  );
};

export default Login;